openapi: 3.0.3
info:
  title: User Service API
  version: 1.0.0
  description: API for user management and authentication

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /signup:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: StrongPass123!
                full_name:
                  type: string
                  example: John Doe
                phone_number:
                  type: string
                  example: "+1234567890"
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request data

  /login:
    post:
      summary: Authenticate a user and obtain JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: johndoe
                password:
                  type: string
                  format: password
                  example: StrongPass123!
      responses:
        '200':
          description: Successful login, returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authorization
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid credentials

  /me:
    get:
      summary: Get information about the current authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized access

    put:
      summary: Update the current authenticated user's profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: johndoe_new@example.com
                full_name:
                  type: string
                  example: Johnathan Doe
                phone_number:
                  type: string
                  example: "+1234567890"
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized access

  /users:
    get:
      summary: Retrieve list of users (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: role
          schema:
            type: string
            enum: [user, admin]
          description: Filter users by role
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number for pagination
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Number of users per page
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  totalCount:
                    type: integer
                    description: Total number of users matching the criteria
                    example: 150
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden - insufficient permissions

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        user_id:
          type: integer
          example: 123
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: johndoe@example.com
        full_name:
          type: string
          example: John Doe
        phone_number:
          type: string
          example: "+1234567890"
        role:
          type: string
          description: User role, e.g., user or admin
          example: user
        created_at:
          type: string
          format: date-time
          example: "2025-06-02T12:00:00Z"
